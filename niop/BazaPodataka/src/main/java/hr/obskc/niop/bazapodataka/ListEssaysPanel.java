package hr.obskc.niop.bazapodataka;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

public class ListEssaysPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListEssaysPanel
     */
    public ListEssaysPanel() {
        initComponents();
        this.load();

        DefaultTableModel model = (DefaultTableModel) listTable.getModel();
        model.addTableModelListener(e -> {
            if (e.getType() == TableModelEvent.UPDATE) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                long id = (long) model.getValueAt(row, 0);
                String gradeStr = (String) model.getValueAt(row, column);

                try {
                    int grade = Integer.parseInt(gradeStr);
                    if (grade < 1 || grade > 5) {
                        throw new NumberFormatException("Invalid grade");
                    }
                    
                    Connection conn = Database.getInstance().getConnection();
                    String query = "UPDATE submissions SET grade = ? WHERE id = ?;";
                    PreparedStatement stmt = conn.prepareStatement(query);
                    stmt.setInt(1, grade);
                    stmt.setLong(2, id);
                    stmt.executeUpdate();
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Morate upisati broj između 1 i 5!", "Provjera podataka", JOptionPane.ERROR_MESSAGE);
                    model.setValueAt("1", row, column);
                } catch (SQLException ex2) {
                    System.err.println("Greška prilikom spremanja ocjene završnog rada u bazu!");
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topLabel = new javax.swing.JLabel();
        listScrollPane = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();

        topLabel.setBackground(new java.awt.Color(255, 255, 153));
        topLabel.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        topLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        topLabel.setText("Pregled završnih radova");
        topLabel.setOpaque(true);

        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Subject", "Teacher", "Time", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listScrollPane.setViewportView(listTable);

        refreshButton.setText("Osvježi");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(topLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(topLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        this.load();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void load() {
        try {
            Connection conn = Database.getInstance().getConnection();
            String query = "SELECT * FROM submissions ORDER BY title";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet result = stmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) listTable.getModel();
            model.setRowCount(0);

            while (result.next()) {
                Submission newSubmission = new Submission(result);
                Object[] row = {newSubmission.getId(), newSubmission.getTitle(), newSubmission.getSubject(),
                    newSubmission.getTeacher(), newSubmission.getTime(),
                    newSubmission.getGrade()};
                model.addRow(row);
            }
        } catch (SQLException ex) {
            System.err.println("Greška prilikom dohvaćanja završnih radova iz baze!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.JTable listTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel topLabel;
    // End of variables declaration//GEN-END:variables
}
